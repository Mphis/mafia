{"version":3,"sources":["App.js","Intro.js","serviceWorker.js","index.js"],"names":["App","this","props","name","elementID","document","getElementById","innerHTML","clearBox","console","log","React","Component","Intro","a","useState","clicked1","setbutton1","clicked2","setbutton2","scale1","useSpring","scale2","key","text","items","transitions","useTransition","item","from","opacity","height","innerHeight","color","transform","enter","map","div","style","id","className","button","onMouseDown","onMouseUp","onClick","createRoom","backgroundColor","width","fontFamily","fontSize","interpolate","s","children","joinRoom","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kSAyBeA,G,6KApBX,OAAO,sCAAYC,KAAKC,MAAMC,Q,+BAGvBC,GACPC,SAASC,eAAeF,GAAWG,UAAY,K,mCAK/CN,KAAKO,SAAS,QACdC,QAAQC,IAAI,mB,iCAKZT,KAAKO,SAAS,QACdC,QAAQC,IAAI,oB,GAlBEC,IAAMC,Y,sBCyETC,MApEf,WACE,IAAMC,EAAI,IAAId,EADC,EAEgBe,oBAAS,GAFzB,mBAERC,EAFQ,KAEEC,EAFF,OAGgBF,oBAAS,GAHzB,mBAGRG,EAHQ,KAGEC,EAHF,KAIPC,EAAWC,YAAU,CAAED,OAAQJ,EAAW,GAAM,IAAhDI,OACAE,EAAWD,YAAU,CAAEC,OAAQJ,EAAW,GAAM,IAAhDI,OALO,EAOMP,mBAAS,CAAC,CAAEQ,IAAK,EAAGC,KAAM,WAPhC,mBAORC,EAPQ,KAQTC,GARS,KAQKC,YAAcF,GAAO,SAAAG,GAAI,OAAIA,EAAKL,MAAK,CACzDM,KAAM,CACJC,QAAS,EACTC,OAAQ,EACRC,YAAa,EACbC,MAAO,MACPC,UAAW,6CAEbC,MAAO,CACLL,QAAS,EACTC,OAAQ,GACRC,YAAa,GACbC,MAAO,QACPC,UAAW,gDAGf,OACE,6BACGR,EAAYU,KAAI,gBAAGR,EAAH,EAAGA,KAAM1B,EAAT,EAASA,MAAOqB,EAAhB,EAAgBA,IAAhB,OACf,kBAAC,IAASc,IAAV,CAAcd,IAAKA,EAAKe,MAAOpC,GAC5B0B,EAAKJ,SAGV,yBAAKe,GAAG,MAAMC,UAAU,OACtB,kBAAC,IAASC,OAAV,CACEC,YAAa,kBAAMzB,GAAW,IAC9B0B,UAAW,kBAAM1B,GAAW,IAC5B2B,QAAS,kBAAM9B,EAAE+B,cACjBP,MAAO,CACLQ,gBAAiB,QACjBf,OAAQ,OACRgB,MAAO,QACPd,MAAO,MACPe,WAAY,SACZC,SAAU,OACVf,UAAWd,EAAO8B,aAAY,SAAAC,GAAC,sBAAaA,EAAb,SAEjCC,SAAS,eAEX,6BACA,kBAAC,IAASX,OAAV,CACEC,YAAa,kBAAMvB,GAAW,IAC9BwB,UAAW,kBAAMxB,GAAW,IAC5ByB,QAAS,kBAAM9B,EAAEuC,YACjBf,MAAO,CACLQ,gBAAiB,MACjBf,OAAQ,OACRgB,MAAO,QACPd,MAAO,OACPe,WAAY,SACZC,SAAU,OACVf,UAAWZ,EAAO4B,aAAY,SAAAC,GAAC,sBAAaA,EAAb,SAEjCC,SAAS,iBCzDCE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,6BACE,yBAAKpB,UAAU,WACb,kBAAC,EAAD,QAGJnC,SAASC,eAAe,SDsHpB,kBAAmBuD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.1cb7caae.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n\n  clearBox(elementID) {\n    document.getElementById(elementID).innerHTML = \"\";\n  }\n\n  //Create room has the PostgresSQL code, the unique code for the room and the front end for viewing players in room.\n  createRoom() {\n    this.clearBox(\"root\");\n    console.log(\"Creating Room\");\n  }\n\n  //Join room has the PostgresSQL code, a field to enter the unique code and the front end for viewing players in room.\n  joinRoom() {\n    this.clearBox(\"root\");\n    console.log(\"Joining Room\");\n  }\n}\n\nexport default App;\n","import \"./Intro.css\";\nimport App from \"./App\";\nimport { useSpring, useTransition, animated } from \"react-spring\";\nimport React, { useState } from \"react\";\n\nfunction clearBox(elementID) {\n  document.getElementById(elementID).innerHTML = \"\";\n}\nfunction Intro() {\n  const a = new App();\n  const [clicked1, setbutton1] = useState(false);\n  const [clicked2, setbutton2] = useState(false);\n  const { scale1 } = useSpring({ scale1: clicked1 ? 0.8 : 1 });\n  const { scale2 } = useSpring({ scale2: clicked2 ? 0.8 : 1 });\n\n  const [items, set] = useState([{ key: 1, text: \"MAFIA\" }]);\n  const transitions = useTransition(items, item => item.key, {\n    from: {\n      opacity: 0,\n      height: 0,\n      innerHeight: 0,\n      color: \"red\",\n      transform: \"perspective(600px) translate3d(0,-40px,0)\"\n    },\n    enter: {\n      opacity: 1,\n      height: 80,\n      innerHeight: 80,\n      color: \"white\",\n      transform: \"perspective(600px) translate3d(0,250px,0)\"\n    }\n  });\n  return (\n    <div>\n      {transitions.map(({ item, props, key }) => (\n        <animated.div key={key} style={props}>\n          {item.text}\n        </animated.div>\n      ))}\n      <div id=\"btn\" className=\"btn\">\n        <animated.button\n          onMouseDown={() => setbutton1(true)}\n          onMouseUp={() => setbutton1(false)}\n          onClick={() => a.createRoom()}\n          style={{\n            backgroundColor: \"white\",\n            height: \"50px\",\n            width: \"100px\",\n            color: \"red\",\n            fontFamily: \"Ubuntu\",\n            fontSize: \"15px\",\n            transform: scale1.interpolate(s => `scale(${s})`)\n          }}\n          children=\"Start Game\"\n        />\n        <br />\n        <animated.button\n          onMouseDown={() => setbutton2(true)}\n          onMouseUp={() => setbutton2(false)}\n          onClick={() => a.joinRoom()}\n          style={{\n            backgroundColor: \"red\",\n            height: \"50px\",\n            width: \"100px\",\n            color: \"#FFF\",\n            fontFamily: \"Ubuntu\",\n            fontSize: \"15px\",\n            transform: scale2.interpolate(s => `scale(${s})`)\n          }}\n          children=\"Join Room\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Intro;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport Intro from \"./Intro\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <div>\n    <div className=\"display\">\n      <Intro />\n    </div>\n  </div>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}